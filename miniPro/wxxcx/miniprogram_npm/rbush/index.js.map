{"version":3,"sources":["rbush.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function (global, factory) {\r\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\ntypeof define === 'function' && define.amd ? define(factory) :\r\n(global = global || self, global.RBush = factory());\r\n}(this, function () { \r\n\r\nfunction quickselect(arr, k, left, right, compare) {\r\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\r\n}\r\n\r\nfunction quickselectStep(arr, k, left, right, compare) {\r\n\r\n    while (right > left) {\r\n        if (right - left > 600) {\r\n            var n = right - left + 1;\r\n            var m = k - left + 1;\r\n            var z = Math.log(n);\r\n            var s = 0.5 * Math.exp(2 * z / 3);\r\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\r\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\r\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\r\n            quickselectStep(arr, k, newLeft, newRight, compare);\r\n        }\r\n\r\n        var t = arr[k];\r\n        var i = left;\r\n        var j = right;\r\n\r\n        swap(arr, left, k);\r\n        if (compare(arr[right], t) > 0) { swap(arr, left, right); }\r\n\r\n        while (i < j) {\r\n            swap(arr, i, j);\r\n            i++;\r\n            j--;\r\n            while (compare(arr[i], t) < 0) { i++; }\r\n            while (compare(arr[j], t) > 0) { j--; }\r\n        }\r\n\r\n        if (compare(arr[left], t) === 0) { swap(arr, left, j); }\r\n        else {\r\n            j++;\r\n            swap(arr, j, right);\r\n        }\r\n\r\n        if (j <= k) { left = j + 1; }\r\n        if (k <= j) { right = j - 1; }\r\n    }\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n    var tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\nfunction defaultCompare(a, b) {\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n}\r\n\r\nvar RBush = function RBush(maxEntries) {\r\n    if ( maxEntries === void 0 ) maxEntries = 9;\r\n\r\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\r\n    this._maxEntries = Math.max(4, maxEntries);\r\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\r\n    this.clear();\r\n};\r\n\r\nRBush.prototype.all = function all () {\r\n    return this._all(this.data, []);\r\n};\r\n\r\nRBush.prototype.search = function search (bbox) {\r\n    var node = this.data;\r\n    var result = [];\r\n\r\n    if (!intersects(bbox, node)) { return result; }\r\n\r\n    var toBBox = this.toBBox;\r\n    var nodesToSearch = [];\r\n\r\n    while (node) {\r\n        for (var i = 0; i < node.children.length; i++) {\r\n            var child = node.children[i];\r\n            var childBBox = node.leaf ? toBBox(child) : child;\r\n\r\n            if (intersects(bbox, childBBox)) {\r\n                if (node.leaf) { result.push(child); }\r\n                else if (contains(bbox, childBBox)) { this._all(child, result); }\r\n                else { nodesToSearch.push(child); }\r\n            }\r\n        }\r\n        node = nodesToSearch.pop();\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nRBush.prototype.collides = function collides (bbox) {\r\n    var node = this.data;\r\n\r\n    if (!intersects(bbox, node)) { return false; }\r\n\r\n    var nodesToSearch = [];\r\n    while (node) {\r\n        for (var i = 0; i < node.children.length; i++) {\r\n            var child = node.children[i];\r\n            var childBBox = node.leaf ? this.toBBox(child) : child;\r\n\r\n            if (intersects(bbox, childBBox)) {\r\n                if (node.leaf || contains(bbox, childBBox)) { return true; }\r\n                nodesToSearch.push(child);\r\n            }\r\n        }\r\n        node = nodesToSearch.pop();\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nRBush.prototype.load = function load (data) {\r\n    if (!(data && data.length)) { return this; }\r\n\r\n    if (data.length < this._minEntries) {\r\n        for (var i = 0; i < data.length; i++) {\r\n            this.insert(data[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // recursively build the tree with the given data from scratch using OMT algorithm\r\n    var node = this._build(data.slice(), 0, data.length - 1, 0);\r\n\r\n    if (!this.data.children.length) {\r\n        // save as is if tree is empty\r\n        this.data = node;\r\n\r\n    } else if (this.data.height === node.height) {\r\n        // split root if trees have the same height\r\n        this._splitRoot(this.data, node);\r\n\r\n    } else {\r\n        if (this.data.height < node.height) {\r\n            // swap trees if inserted one is bigger\r\n            var tmpNode = this.data;\r\n            this.data = node;\r\n            node = tmpNode;\r\n        }\r\n\r\n        // insert the small tree into the large tree at appropriate level\r\n        this._insert(node, this.data.height - node.height - 1, true);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nRBush.prototype.insert = function insert (item) {\r\n    if (item) { this._insert(item, this.data.height - 1); }\r\n    return this;\r\n};\r\n\r\nRBush.prototype.clear = function clear () {\r\n    this.data = createNode([]);\r\n    return this;\r\n};\r\n\r\nRBush.prototype.remove = function remove (item, equalsFn) {\r\n    if (!item) { return this; }\r\n\r\n    var node = this.data;\r\n    var bbox = this.toBBox(item);\r\n    var path = [];\r\n    var indexes = [];\r\n    var i, parent, goingUp;\r\n\r\n    // depth-first iterative tree traversal\r\n    while (node || path.length) {\r\n\r\n        if (!node) { // go up\r\n            node = path.pop();\r\n            parent = path[path.length - 1];\r\n            i = indexes.pop();\r\n            goingUp = true;\r\n        }\r\n\r\n        if (node.leaf) { // check current node\r\n            var index = findItem(item, node.children, equalsFn);\r\n\r\n            if (index !== -1) {\r\n                // item found, remove the item and condense tree upwards\r\n                node.children.splice(index, 1);\r\n                path.push(node);\r\n                this._condense(path);\r\n                return this;\r\n            }\r\n        }\r\n\r\n        if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\r\n            path.push(node);\r\n            indexes.push(i);\r\n            i = 0;\r\n            parent = node;\r\n            node = node.children[0];\r\n\r\n        } else if (parent) { // go right\r\n            i++;\r\n            node = parent.children[i];\r\n            goingUp = false;\r\n\r\n        } else { node = null; } // nothing found\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nRBush.prototype.toBBox = function toBBox (item) { return item; };\r\n\r\nRBush.prototype.compareMinX = function compareMinX (a, b) { return a.minX - b.minX; };\r\nRBush.prototype.compareMinY = function compareMinY (a, b) { return a.minY - b.minY; };\r\n\r\nRBush.prototype.toJSON = function toJSON () { return this.data; };\r\n\r\nRBush.prototype.fromJSON = function fromJSON (data) {\r\n    this.data = data;\r\n    return this;\r\n};\r\n\r\nRBush.prototype._all = function _all (node, result) {\r\n    var nodesToSearch = [];\r\n    while (node) {\r\n        if (node.leaf) { result.push.apply(result, node.children); }\r\n        else { nodesToSearch.push.apply(nodesToSearch, node.children); }\r\n\r\n        node = nodesToSearch.pop();\r\n    }\r\n    return result;\r\n};\r\n\r\nRBush.prototype._build = function _build (items, left, right, height) {\r\n\r\n    var N = right - left + 1;\r\n    var M = this._maxEntries;\r\n    var node;\r\n\r\n    if (N <= M) {\r\n        // reached leaf level; return leaf\r\n        node = createNode(items.slice(left, right + 1));\r\n        calcBBox(node, this.toBBox);\r\n        return node;\r\n    }\r\n\r\n    if (!height) {\r\n        // target height of the bulk-loaded tree\r\n        height = Math.ceil(Math.log(N) / Math.log(M));\r\n\r\n        // target number of root entries to maximize storage utilization\r\n        M = Math.ceil(N / Math.pow(M, height - 1));\r\n    }\r\n\r\n    node = createNode([]);\r\n    node.leaf = false;\r\n    node.height = height;\r\n\r\n    // split the items into M mostly square tiles\r\n\r\n    var N2 = Math.ceil(N / M);\r\n    var N1 = N2 * Math.ceil(Math.sqrt(M));\r\n\r\n    multiSelect(items, left, right, N1, this.compareMinX);\r\n\r\n    for (var i = left; i <= right; i += N1) {\r\n\r\n        var right2 = Math.min(i + N1 - 1, right);\r\n\r\n        multiSelect(items, i, right2, N2, this.compareMinY);\r\n\r\n        for (var j = i; j <= right2; j += N2) {\r\n\r\n            var right3 = Math.min(j + N2 - 1, right2);\r\n\r\n            // pack each entry recursively\r\n            node.children.push(this._build(items, j, right3, height - 1));\r\n        }\r\n    }\r\n\r\n    calcBBox(node, this.toBBox);\r\n\r\n    return node;\r\n};\r\n\r\nRBush.prototype._chooseSubtree = function _chooseSubtree (bbox, node, level, path) {\r\n    while (true) {\r\n        path.push(node);\r\n\r\n        if (node.leaf || path.length - 1 === level) { break; }\r\n\r\n        var minArea = Infinity;\r\n        var minEnlargement = Infinity;\r\n        var targetNode = (void 0);\r\n\r\n        for (var i = 0; i < node.children.length; i++) {\r\n            var child = node.children[i];\r\n            var area = bboxArea(child);\r\n            var enlargement = enlargedArea(bbox, child) - area;\r\n\r\n            // choose entry with the least area enlargement\r\n            if (enlargement < minEnlargement) {\r\n                minEnlargement = enlargement;\r\n                minArea = area < minArea ? area : minArea;\r\n                targetNode = child;\r\n\r\n            } else if (enlargement === minEnlargement) {\r\n                // otherwise choose one with the smallest area\r\n                if (area < minArea) {\r\n                    minArea = area;\r\n                    targetNode = child;\r\n                }\r\n            }\r\n        }\r\n\r\n        node = targetNode || node.children[0];\r\n    }\r\n\r\n    return node;\r\n};\r\n\r\nRBush.prototype._insert = function _insert (item, level, isNode) {\r\n    var bbox = isNode ? item : this.toBBox(item);\r\n    var insertPath = [];\r\n\r\n    // find the best node for accommodating the item, saving all nodes along the path too\r\n    var node = this._chooseSubtree(bbox, this.data, level, insertPath);\r\n\r\n    // put the item into the node\r\n    node.children.push(item);\r\n    extend(node, bbox);\r\n\r\n    // split on node overflow; propagate upwards if necessary\r\n    while (level >= 0) {\r\n        if (insertPath[level].children.length > this._maxEntries) {\r\n            this._split(insertPath, level);\r\n            level--;\r\n        } else { break; }\r\n    }\r\n\r\n    // adjust bboxes along the insertion path\r\n    this._adjustParentBBoxes(bbox, insertPath, level);\r\n};\r\n\r\n// split overflowed node into two\r\nRBush.prototype._split = function _split (insertPath, level) {\r\n    var node = insertPath[level];\r\n    var M = node.children.length;\r\n    var m = this._minEntries;\r\n\r\n    this._chooseSplitAxis(node, m, M);\r\n\r\n    var splitIndex = this._chooseSplitIndex(node, m, M);\r\n\r\n    var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\r\n    newNode.height = node.height;\r\n    newNode.leaf = node.leaf;\r\n\r\n    calcBBox(node, this.toBBox);\r\n    calcBBox(newNode, this.toBBox);\r\n\r\n    if (level) { insertPath[level - 1].children.push(newNode); }\r\n    else { this._splitRoot(node, newNode); }\r\n};\r\n\r\nRBush.prototype._splitRoot = function _splitRoot (node, newNode) {\r\n    // split root node\r\n    this.data = createNode([node, newNode]);\r\n    this.data.height = node.height + 1;\r\n    this.data.leaf = false;\r\n    calcBBox(this.data, this.toBBox);\r\n};\r\n\r\nRBush.prototype._chooseSplitIndex = function _chooseSplitIndex (node, m, M) {\r\n    var index;\r\n    var minOverlap = Infinity;\r\n    var minArea = Infinity;\r\n\r\n    for (var i = m; i <= M - m; i++) {\r\n        var bbox1 = distBBox(node, 0, i, this.toBBox);\r\n        var bbox2 = distBBox(node, i, M, this.toBBox);\r\n\r\n        var overlap = intersectionArea(bbox1, bbox2);\r\n        var area = bboxArea(bbox1) + bboxArea(bbox2);\r\n\r\n        // choose distribution with minimum overlap\r\n        if (overlap < minOverlap) {\r\n            minOverlap = overlap;\r\n            index = i;\r\n\r\n            minArea = area < minArea ? area : minArea;\r\n\r\n        } else if (overlap === minOverlap) {\r\n            // otherwise choose distribution with minimum area\r\n            if (area < minArea) {\r\n                minArea = area;\r\n                index = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    return index || M - m;\r\n};\r\n\r\n// sorts node children by the best axis for split\r\nRBush.prototype._chooseSplitAxis = function _chooseSplitAxis (node, m, M) {\r\n    var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\r\n    var compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\r\n    var xMargin = this._allDistMargin(node, m, M, compareMinX);\r\n    var yMargin = this._allDistMargin(node, m, M, compareMinY);\r\n\r\n    // if total distributions margin value is minimal for x, sort by minX,\r\n    // otherwise it's already sorted by minY\r\n    if (xMargin < yMargin) { node.children.sort(compareMinX); }\r\n};\r\n\r\n// total margin of all possible split distributions where each node is at least m full\r\nRBush.prototype._allDistMargin = function _allDistMargin (node, m, M, compare) {\r\n    node.children.sort(compare);\r\n\r\n    var toBBox = this.toBBox;\r\n    var leftBBox = distBBox(node, 0, m, toBBox);\r\n    var rightBBox = distBBox(node, M - m, M, toBBox);\r\n    var margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\r\n\r\n    for (var i = m; i < M - m; i++) {\r\n        var child = node.children[i];\r\n        extend(leftBBox, node.leaf ? toBBox(child) : child);\r\n        margin += bboxMargin(leftBBox);\r\n    }\r\n\r\n    for (var i$1 = M - m - 1; i$1 >= m; i$1--) {\r\n        var child$1 = node.children[i$1];\r\n        extend(rightBBox, node.leaf ? toBBox(child$1) : child$1);\r\n        margin += bboxMargin(rightBBox);\r\n    }\r\n\r\n    return margin;\r\n};\r\n\r\nRBush.prototype._adjustParentBBoxes = function _adjustParentBBoxes (bbox, path, level) {\r\n    // adjust bboxes along the given tree path\r\n    for (var i = level; i >= 0; i--) {\r\n        extend(path[i], bbox);\r\n    }\r\n};\r\n\r\nRBush.prototype._condense = function _condense (path) {\r\n    // go through the path, removing empty nodes and updating bboxes\r\n    for (var i = path.length - 1, siblings = (void 0); i >= 0; i--) {\r\n        if (path[i].children.length === 0) {\r\n            if (i > 0) {\r\n                siblings = path[i - 1].children;\r\n                siblings.splice(siblings.indexOf(path[i]), 1);\r\n\r\n            } else { this.clear(); }\r\n\r\n        } else { calcBBox(path[i], this.toBBox); }\r\n    }\r\n};\r\n\r\nfunction findItem(item, items, equalsFn) {\r\n    if (!equalsFn) { return items.indexOf(item); }\r\n\r\n    for (var i = 0; i < items.length; i++) {\r\n        if (equalsFn(item, items[i])) { return i; }\r\n    }\r\n    return -1;\r\n}\r\n\r\n// calculate node's bbox from bboxes of its children\r\nfunction calcBBox(node, toBBox) {\r\n    distBBox(node, 0, node.children.length, toBBox, node);\r\n}\r\n\r\n// min bounding rectangle of node children from k to p-1\r\nfunction distBBox(node, k, p, toBBox, destNode) {\r\n    if (!destNode) { destNode = createNode(null); }\r\n    destNode.minX = Infinity;\r\n    destNode.minY = Infinity;\r\n    destNode.maxX = -Infinity;\r\n    destNode.maxY = -Infinity;\r\n\r\n    for (var i = k; i < p; i++) {\r\n        var child = node.children[i];\r\n        extend(destNode, node.leaf ? toBBox(child) : child);\r\n    }\r\n\r\n    return destNode;\r\n}\r\n\r\nfunction extend(a, b) {\r\n    a.minX = Math.min(a.minX, b.minX);\r\n    a.minY = Math.min(a.minY, b.minY);\r\n    a.maxX = Math.max(a.maxX, b.maxX);\r\n    a.maxY = Math.max(a.maxY, b.maxY);\r\n    return a;\r\n}\r\n\r\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\r\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\r\n\r\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\r\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\r\n\r\nfunction enlargedArea(a, b) {\r\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\r\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\r\n}\r\n\r\nfunction intersectionArea(a, b) {\r\n    var minX = Math.max(a.minX, b.minX);\r\n    var minY = Math.max(a.minY, b.minY);\r\n    var maxX = Math.min(a.maxX, b.maxX);\r\n    var maxY = Math.min(a.maxY, b.maxY);\r\n\r\n    return Math.max(0, maxX - minX) *\r\n           Math.max(0, maxY - minY);\r\n}\r\n\r\nfunction contains(a, b) {\r\n    return a.minX <= b.minX &&\r\n           a.minY <= b.minY &&\r\n           b.maxX <= a.maxX &&\r\n           b.maxY <= a.maxY;\r\n}\r\n\r\nfunction intersects(a, b) {\r\n    return b.minX <= a.maxX &&\r\n           b.minY <= a.maxY &&\r\n           b.maxX >= a.minX &&\r\n           b.maxY >= a.minY;\r\n}\r\n\r\nfunction createNode(children) {\r\n    return {\r\n        children: children,\r\n        height: 1,\r\n        leaf: true,\r\n        minX: Infinity,\r\n        minY: Infinity,\r\n        maxX: -Infinity,\r\n        maxY: -Infinity\r\n    };\r\n}\r\n\r\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\r\n// combines selection algorithm with binary divide & conquer approach\r\n\r\nfunction multiSelect(arr, left, right, n, compare) {\r\n    var stack = [left, right];\r\n\r\n    while (stack.length) {\r\n        right = stack.pop();\r\n        left = stack.pop();\r\n\r\n        if (right - left <= n) { continue; }\r\n\r\n        var mid = left + Math.ceil((right - left) / n / 2) * n;\r\n        quickselect(arr, mid, left, right, compare);\r\n\r\n        stack.push(left, mid, mid, right);\r\n    }\r\n}\r\n\r\nreturn RBush;\r\n\r\n}));\r\n"]}