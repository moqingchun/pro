{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var rbush = require('rbush');\r\nvar helpers = require('@turf/helpers');\r\nvar meta = require('@turf/meta');\r\nvar turfBBox = require('@turf/bbox').default;\r\nvar featureEach = meta.featureEach;\r\nvar coordEach = meta.coordEach;\r\nvar polygon = helpers.polygon;\r\nvar featureCollection = helpers.featureCollection;\r\n\r\n/**\r\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\r\n *\r\n * @name rbush\r\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\r\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\r\n * @returns {RBush} GeoJSON RBush\r\n * @example\r\n * var geojsonRbush = require('geojson-rbush').default;\r\n * var tree = geojsonRbush();\r\n */\r\nfunction geojsonRbush(maxEntries) {\r\n    var tree = new rbush(maxEntries);\r\n    /**\r\n     * [insert](https://github.com/mourner/rbush#data-format)\r\n     *\r\n     * @param {Feature} feature insert single GeoJSON Feature\r\n     * @returns {RBush} GeoJSON RBush\r\n     * @example\r\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n     * tree.insert(poly)\r\n     */\r\n    tree.insert = function (feature) {\r\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\r\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\r\n        return rbush.prototype.insert.call(this, feature);\r\n    };\r\n\r\n    /**\r\n     * [load](https://github.com/mourner/rbush#bulk-inserting-data)\r\n     *\r\n     * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\r\n     * @returns {RBush} GeoJSON RBush\r\n     * @example\r\n     * var polys = turf.polygons([\r\n     *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\r\n     *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\r\n     * ]);\r\n     * tree.load(polys);\r\n     */\r\n    tree.load = function (features) {\r\n        var load = [];\r\n        // Load an Array of Features\r\n        if (Array.isArray(features)) {\r\n            features.forEach(function (feature) {\r\n                if (feature.type !== 'Feature') throw new Error('invalid features');\r\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\r\n                load.push(feature);\r\n            });\r\n        } else {\r\n            // Load a FeatureCollection\r\n            featureEach(features, function (feature) {\r\n                if (feature.type !== 'Feature') throw new Error('invalid features');\r\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\r\n                load.push(feature);\r\n            });\r\n        }\r\n        return rbush.prototype.load.call(this, load);\r\n    };\r\n\r\n    /**\r\n     * [remove](https://github.com/mourner/rbush#removing-data)\r\n     *\r\n     * @param {Feature} feature remove single GeoJSON Feature\r\n     * @param {Function} equals Pass a custom equals function to compare by value for removal.\r\n     * @returns {RBush} GeoJSON RBush\r\n     * @example\r\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n     *\r\n     * tree.remove(poly);\r\n     */\r\n    tree.remove = function (feature, equals) {\r\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\r\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\r\n        return rbush.prototype.remove.call(this, feature, equals);\r\n    };\r\n\r\n    /**\r\n     * [clear](https://github.com/mourner/rbush#removing-data)\r\n     *\r\n     * @returns {RBush} GeoJSON Rbush\r\n     * @example\r\n     * tree.clear()\r\n     */\r\n    tree.clear = function () {\r\n        return rbush.prototype.clear.call(this);\r\n    };\r\n\r\n    /**\r\n     * [search](https://github.com/mourner/rbush#search)\r\n     *\r\n     * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\r\n     * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\r\n     * @example\r\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n     *\r\n     * tree.search(poly);\r\n     */\r\n    tree.search = function (geojson) {\r\n        var features = rbush.prototype.search.call(this, this.toBBox(geojson));\r\n        return featureCollection(features);\r\n    };\r\n\r\n    /**\r\n     * [collides](https://github.com/mourner/rbush#collisions)\r\n     *\r\n     * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\r\n     * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\r\n     * @example\r\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n     *\r\n     * tree.collides(poly);\r\n     */\r\n    tree.collides = function (geojson) {\r\n        return rbush.prototype.collides.call(this, this.toBBox(geojson));\r\n    };\r\n\r\n    /**\r\n     * [all](https://github.com/mourner/rbush#search)\r\n     *\r\n     * @returns {FeatureCollection} all the features in RBush\r\n     * @example\r\n     * tree.all()\r\n     */\r\n    tree.all = function () {\r\n        var features = rbush.prototype.all.call(this);\r\n        return featureCollection(features);\r\n    };\r\n\r\n    /**\r\n     * [toJSON](https://github.com/mourner/rbush#export-and-import)\r\n     *\r\n     * @returns {any} export data as JSON object\r\n     * @example\r\n     * var exported = tree.toJSON()\r\n     */\r\n    tree.toJSON = function () {\r\n        return rbush.prototype.toJSON.call(this);\r\n    };\r\n\r\n    /**\r\n     * [fromJSON](https://github.com/mourner/rbush#export-and-import)\r\n     *\r\n     * @param {any} json import previously exported data\r\n     * @returns {RBush} GeoJSON RBush\r\n     * @example\r\n     * var exported = {\r\n     *   \"children\": [\r\n     *     {\r\n     *       \"type\": \"Feature\",\r\n     *       \"geometry\": {\r\n     *         \"type\": \"Point\",\r\n     *         \"coordinates\": [110, 50]\r\n     *       },\r\n     *       \"properties\": {},\r\n     *       \"bbox\": [110, 50, 110, 50]\r\n     *     }\r\n     *   ],\r\n     *   \"height\": 1,\r\n     *   \"leaf\": true,\r\n     *   \"minX\": 110,\r\n     *   \"minY\": 50,\r\n     *   \"maxX\": 110,\r\n     *   \"maxY\": 50\r\n     * }\r\n     * tree.fromJSON(exported)\r\n     */\r\n    tree.fromJSON = function (json) {\r\n        return rbush.prototype.fromJSON.call(this, json);\r\n    };\r\n\r\n    /**\r\n     * Converts GeoJSON to {minX, minY, maxX, maxY} schema\r\n     *\r\n     * @private\r\n     * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\r\n     * @returns {Object} converted to {minX, minY, maxX, maxY}\r\n     */\r\n    tree.toBBox = function (geojson) {\r\n        var bbox;\r\n        if (geojson.bbox) bbox = geojson.bbox;\r\n        else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;\r\n        else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];\r\n        else if (geojson.type === 'Feature') bbox = turfBBox(geojson);\r\n        else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);\r\n        else throw new Error('invalid geojson')\r\n\r\n        return {\r\n            minX: bbox[0],\r\n            minY: bbox[1],\r\n            maxX: bbox[2],\r\n            maxY: bbox[3]\r\n        };\r\n    };\r\n    return tree;\r\n}\r\n\r\nmodule.exports = geojsonRbush;\r\nmodule.exports.default = geojsonRbush;\r\n"]}