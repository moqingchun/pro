{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar helpers_1 = require(\"@turf/helpers\");\r\nvar invariant_1 = require(\"@turf/invariant\");\r\n// http://en.wikipedia.org/wiki/Haversine_formula\r\n// http://www.movable-type.co.uk/scripts/latlong.html\r\n/**\r\n * Takes two {@link Point|points} and finds the geographic bearing between them,\r\n * i.e. the angle measured in degrees from the north line (0 degrees)\r\n *\r\n * @name bearing\r\n * @param {Coord} start starting Point\r\n * @param {Coord} end ending Point\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {boolean} [options.final=false] calculates the final bearing if true\r\n * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)\r\n * @example\r\n * var point1 = turf.point([-75.343, 39.984]);\r\n * var point2 = turf.point([-75.534, 39.123]);\r\n *\r\n * var bearing = turf.bearing(point1, point2);\r\n *\r\n * //addToMap\r\n * var addToMap = [point1, point2]\r\n * point1.properties['marker-color'] = '#f00'\r\n * point2.properties['marker-color'] = '#0f0'\r\n * point1.properties.bearing = bearing\r\n */\r\nfunction bearing(start, end, options) {\r\n    if (options === void 0) { options = {}; }\r\n    // Reverse calculation\r\n    if (options.final === true) {\r\n        return calculateFinalBearing(start, end);\r\n    }\r\n    var coordinates1 = invariant_1.getCoord(start);\r\n    var coordinates2 = invariant_1.getCoord(end);\r\n    var lon1 = helpers_1.degreesToRadians(coordinates1[0]);\r\n    var lon2 = helpers_1.degreesToRadians(coordinates2[0]);\r\n    var lat1 = helpers_1.degreesToRadians(coordinates1[1]);\r\n    var lat2 = helpers_1.degreesToRadians(coordinates2[1]);\r\n    var a = Math.sin(lon2 - lon1) * Math.cos(lat2);\r\n    var b = Math.cos(lat1) * Math.sin(lat2) -\r\n        Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\r\n    return helpers_1.radiansToDegrees(Math.atan2(a, b));\r\n}\r\nexports.default = bearing;\r\n/**\r\n * Calculates Final Bearing\r\n *\r\n * @private\r\n * @param {Coord} start starting Point\r\n * @param {Coord} end ending Point\r\n * @returns {number} bearing\r\n */\r\nfunction calculateFinalBearing(start, end) {\r\n    // Swap start & end\r\n    var bear = bearing(end, start);\r\n    bear = (bear + 180) % 360;\r\n    return bear;\r\n}\r\n"]}