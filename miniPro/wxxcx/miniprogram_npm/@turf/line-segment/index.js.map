{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar helpers_1 = require(\"@turf/helpers\");\r\nvar invariant_1 = require(\"@turf/invariant\");\r\nvar meta_1 = require(\"@turf/meta\");\r\n/**\r\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\r\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\r\n *\r\n * @name lineSegment\r\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\r\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\r\n * @example\r\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\r\n * var segments = turf.lineSegment(polygon);\r\n *\r\n * //addToMap\r\n * var addToMap = [polygon, segments]\r\n */\r\nfunction lineSegment(geojson) {\r\n    if (!geojson) {\r\n        throw new Error(\"geojson is required\");\r\n    }\r\n    var results = [];\r\n    meta_1.flattenEach(geojson, function (feature) {\r\n        lineSegmentFeature(feature, results);\r\n    });\r\n    return helpers_1.featureCollection(results);\r\n}\r\n/**\r\n * Line Segment\r\n *\r\n * @private\r\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\r\n * @param {Array} results push to results\r\n * @returns {void}\r\n */\r\nfunction lineSegmentFeature(geojson, results) {\r\n    var coords = [];\r\n    var geometry = geojson.geometry;\r\n    if (geometry !== null) {\r\n        switch (geometry.type) {\r\n            case \"Polygon\":\r\n                coords = invariant_1.getCoords(geometry);\r\n                break;\r\n            case \"LineString\":\r\n                coords = [invariant_1.getCoords(geometry)];\r\n        }\r\n        coords.forEach(function (coord) {\r\n            var segments = createSegments(coord, geojson.properties);\r\n            segments.forEach(function (segment) {\r\n                segment.id = results.length;\r\n                results.push(segment);\r\n            });\r\n        });\r\n    }\r\n}\r\n/**\r\n * Create Segments from LineString coordinates\r\n *\r\n * @private\r\n * @param {Array<Array<number>>} coords LineString coordinates\r\n * @param {*} properties GeoJSON properties\r\n * @returns {Array<Feature<LineString>>} line segments\r\n */\r\nfunction createSegments(coords, properties) {\r\n    var segments = [];\r\n    coords.reduce(function (previousCoords, currentCoords) {\r\n        var segment = helpers_1.lineString([previousCoords, currentCoords], properties);\r\n        segment.bbox = bbox(previousCoords, currentCoords);\r\n        segments.push(segment);\r\n        return currentCoords;\r\n    });\r\n    return segments;\r\n}\r\n/**\r\n * Create BBox between two coordinates (faster than @turf/bbox)\r\n *\r\n * @private\r\n * @param {Array<number>} coords1 Point coordinate\r\n * @param {Array<number>} coords2 Point coordinate\r\n * @returns {BBox} [west, south, east, north]\r\n */\r\nfunction bbox(coords1, coords2) {\r\n    var x1 = coords1[0];\r\n    var y1 = coords1[1];\r\n    var x2 = coords2[0];\r\n    var y2 = coords2[1];\r\n    var west = x1 < x2 ? x1 : x2;\r\n    var south = y1 < y2 ? y1 : y2;\r\n    var east = x1 > x2 ? x1 : x2;\r\n    var north = y1 > y2 ? y1 : y2;\r\n    return [west, south, east, north];\r\n}\r\nexports.default = lineSegment;\r\n"]}