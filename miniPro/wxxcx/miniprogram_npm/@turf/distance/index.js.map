{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar invariant_1 = require(\"@turf/invariant\");\r\nvar helpers_1 = require(\"@turf/helpers\");\r\n//http://en.wikipedia.org/wiki/Haversine_formula\r\n//http://www.movable-type.co.uk/scripts/latlong.html\r\n/**\r\n * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.\r\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\r\n *\r\n * @name distance\r\n * @param {Coord | Point} from origin point or coordinate\r\n * @param {Coord | Point} to destination point or coordinate\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\r\n * @returns {number} distance between the two points\r\n * @example\r\n * var from = turf.point([-75.343, 39.984]);\r\n * var to = turf.point([-75.534, 39.123]);\r\n * var options = {units: 'miles'};\r\n *\r\n * var distance = turf.distance(from, to, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [from, to];\r\n * from.properties.distance = distance;\r\n * to.properties.distance = distance;\r\n */\r\nfunction distance(from, to, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var coordinates1 = invariant_1.getCoord(from);\r\n    var coordinates2 = invariant_1.getCoord(to);\r\n    var dLat = helpers_1.degreesToRadians(coordinates2[1] - coordinates1[1]);\r\n    var dLon = helpers_1.degreesToRadians(coordinates2[0] - coordinates1[0]);\r\n    var lat1 = helpers_1.degreesToRadians(coordinates1[1]);\r\n    var lat2 = helpers_1.degreesToRadians(coordinates2[1]);\r\n    var a = Math.pow(Math.sin(dLat / 2), 2) +\r\n        Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\r\n    return helpers_1.radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\r\n}\r\nexports.default = distance;\r\n"]}