{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// http://en.wikipedia.org/wiki/Haversine_formula\r\n// http://www.movable-type.co.uk/scripts/latlong.html\r\nvar helpers_1 = require(\"@turf/helpers\");\r\nvar invariant_1 = require(\"@turf/invariant\");\r\n/**\r\n * Takes a {@link Point} and calculates the location of a destination point given a distance in\r\n * degrees, radians, miles, or kilometers; and bearing in degrees.\r\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\r\n *\r\n * @name destination\r\n * @param {Coord} origin starting point\r\n * @param {number} distance distance from the origin point\r\n * @param {number} bearing ranging from -180 to 180\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\r\n * @param {Object} [options.properties={}] Translate properties to Point\r\n * @returns {Feature<Point>} destination point\r\n * @example\r\n * var point = turf.point([-75.343, 39.984]);\r\n * var distance = 50;\r\n * var bearing = 90;\r\n * var options = {units: 'miles'};\r\n *\r\n * var destination = turf.destination(point, distance, bearing, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [point, destination]\r\n * destination.properties['marker-color'] = '#f00';\r\n * point.properties['marker-color'] = '#0f0';\r\n */\r\nfunction destination(origin, distance, bearing, options) {\r\n    if (options === void 0) { options = {}; }\r\n    // Handle input\r\n    var coordinates1 = invariant_1.getCoord(origin);\r\n    var longitude1 = helpers_1.degreesToRadians(coordinates1[0]);\r\n    var latitude1 = helpers_1.degreesToRadians(coordinates1[1]);\r\n    var bearingRad = helpers_1.degreesToRadians(bearing);\r\n    var radians = helpers_1.lengthToRadians(distance, options.units);\r\n    // Main\r\n    var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) +\r\n        Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));\r\n    var longitude2 = longitude1 +\r\n        Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\r\n    var lng = helpers_1.radiansToDegrees(longitude2);\r\n    var lat = helpers_1.radiansToDegrees(latitude2);\r\n    return helpers_1.point([lng, lat], options.properties);\r\n}\r\nexports.default = destination;\r\n"]}