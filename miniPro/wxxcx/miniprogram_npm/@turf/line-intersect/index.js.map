{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar helpers_1 = require(\"@turf/helpers\");\r\nvar invariant_1 = require(\"@turf/invariant\");\r\nvar line_segment_1 = __importDefault(require(\"@turf/line-segment\"));\r\nvar meta_1 = require(\"@turf/meta\");\r\nvar geojson_rbush_1 = __importDefault(require(\"geojson-rbush\"));\r\n/**\r\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\r\n *\r\n * @name lineIntersect\r\n * @param {GeoJSON} line1 any LineString or Polygon\r\n * @param {GeoJSON} line2 any LineString or Polygon\r\n * @returns {FeatureCollection<Point>} point(s) that intersect both\r\n * @example\r\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\r\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\r\n * var intersects = turf.lineIntersect(line1, line2);\r\n *\r\n * //addToMap\r\n * var addToMap = [line1, line2, intersects]\r\n */\r\nfunction lineIntersect(line1, line2) {\r\n    var unique = {};\r\n    var results = [];\r\n    // First, normalize geometries to features\r\n    // Then, handle simple 2-vertex segments\r\n    if (line1.type === \"LineString\") {\r\n        line1 = helpers_1.feature(line1);\r\n    }\r\n    if (line2.type === \"LineString\") {\r\n        line2 = helpers_1.feature(line2);\r\n    }\r\n    if (line1.type === \"Feature\" &&\r\n        line2.type === \"Feature\" &&\r\n        line1.geometry !== null &&\r\n        line2.geometry !== null &&\r\n        line1.geometry.type === \"LineString\" &&\r\n        line2.geometry.type === \"LineString\" &&\r\n        line1.geometry.coordinates.length === 2 &&\r\n        line2.geometry.coordinates.length === 2) {\r\n        var intersect = intersects(line1, line2);\r\n        if (intersect) {\r\n            results.push(intersect);\r\n        }\r\n        return helpers_1.featureCollection(results);\r\n    }\r\n    // Handles complex GeoJSON Geometries\r\n    var tree = geojson_rbush_1.default();\r\n    tree.load(line_segment_1.default(line2));\r\n    meta_1.featureEach(line_segment_1.default(line1), function (segment) {\r\n        meta_1.featureEach(tree.search(segment), function (match) {\r\n            var intersect = intersects(segment, match);\r\n            if (intersect) {\r\n                // prevent duplicate points https://github.com/Turfjs/turf/issues/688\r\n                var key = invariant_1.getCoords(intersect).join(\",\");\r\n                if (!unique[key]) {\r\n                    unique[key] = true;\r\n                    results.push(intersect);\r\n                }\r\n            }\r\n        });\r\n    });\r\n    return helpers_1.featureCollection(results);\r\n}\r\n/**\r\n * Find a point that intersects LineStrings with two coordinates each\r\n *\r\n * @private\r\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\r\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\r\n * @returns {Feature<Point>} intersecting GeoJSON Point\r\n */\r\nfunction intersects(line1, line2) {\r\n    var coords1 = invariant_1.getCoords(line1);\r\n    var coords2 = invariant_1.getCoords(line2);\r\n    if (coords1.length !== 2) {\r\n        throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\r\n    }\r\n    if (coords2.length !== 2) {\r\n        throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\r\n    }\r\n    var x1 = coords1[0][0];\r\n    var y1 = coords1[0][1];\r\n    var x2 = coords1[1][0];\r\n    var y2 = coords1[1][1];\r\n    var x3 = coords2[0][0];\r\n    var y3 = coords2[0][1];\r\n    var x4 = coords2[1][0];\r\n    var y4 = coords2[1][1];\r\n    var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\r\n    var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\r\n    var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\r\n    if (denom === 0) {\r\n        if (numeA === 0 && numeB === 0) {\r\n            return null;\r\n        }\r\n        return null;\r\n    }\r\n    var uA = numeA / denom;\r\n    var uB = numeB / denom;\r\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\r\n        var x = x1 + uA * (x2 - x1);\r\n        var y = y1 + uA * (y2 - y1);\r\n        return helpers_1.point([x, y]);\r\n    }\r\n    return null;\r\n}\r\nexports.default = lineIntersect;\r\n"]}